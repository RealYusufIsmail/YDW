plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.6.1"
}

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'yusufgamer222@gmail.com'
    dev_organization = 'RealYusufIsmail'
    dev_organizationUrl = 'https://github.com/RealYusufIsmail'

    gpl_name = 'GNU Library General Public License version 3'
    gpl_url = 'https://github.com/RealYusufIsmail/YDW/blob/Master/LICENSE'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

archivesBaseName = "ydw"
description = "YDW (Yusuf's Discord Wrapper) My own Discord Wrapper"
group 'io.github.realyusufismail'
version '0.0.1'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    //config
    implementation group: 'io.github.yusufsdiscordbot', name: 'config', version: '1.0.4'
    //https and ws
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '5.0.0-alpha.7'
    implementation group: 'com.neovisionaries', name: 'nv-websocket-client', version: '2.14'
    //json
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.13.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
    //Logger
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.11'
    //google
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    //better time
    implementation group: 'joda-time', name: 'joda-time', version: '2.10.14'
}


test {
    useJUnitPlatform()
}

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        eclipse('4.21.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

afterEvaluate { project ->
    ext.isReleaseVersion = !version.endsWith("RELEASE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = project.artifactId // or maybe archiveBaseName?
            from components.java
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/RealYusufIsmail/YDW"
                packaging = "jar"

                licenses {
                    license {
                        name = "${gpl_name}"
                        url = "${gpl_url}"
                    }
                }
                developers {
                    developer {
                        id = "${dev_id}"
                        name = "${dev_name}"
                        email = "${dev_email}"
                        organization = "${dev_organization}"
                        organizationUrl = "${dev_organizationUrl}"
                    }
                }
                scm {
                    connection = 'https://github.com/RealYusufIsmail/YDW.git'
                    developerConnection = 'scm:git:ssh://git@github.com/RealYusufIsmail/YDW.git'
                    url = 'github.com/YusufsDiscordbot/YDL'
                }
            }
        }
    }
    repositories {
        maven {
            afterEvaluate { project ->
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                //println "repos: " + version
                //println "repos: " + isReleaseVersion
                //println url

                credentials {
                    username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                    password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                }
            }
        }
    }
}

signing {
    afterEvaluate { project ->
        //println "sign: " + version
        //println "sign: " + isReleaseVersion
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}